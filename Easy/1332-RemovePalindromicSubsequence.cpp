
/*
 *  Author: Raghavendra Mallela
*/
/*
 * Given a string s consisting only of letters 'a' and 'b'. In a single
 * step you can remove one palindromic subsequence from s.
 * 
 * Return the minimum number of steps to make the given string empty.
 *
 * A string is a subsequence of a given string, if it is generated by
 * deleting some characters of a given string without changing its order.
 *
 * A string is called palindrome if is one that reads the same backward
 * as well as forward.
 *
 * Example 1:
 * Input: s = "ababa"
 * Output: 1
 * Explanation: String is already palindrome
 *
 * Example 2:
 *
 * Input: s = "abb"
 * Output: 2
 * Explanation: "abb" -> "bb" -> "". 
 * Remove palindromic subsequence "a" then "bb".
 *
 * Example 3:
 * Input: s = "baabb"
 * Output: 2
 * Explanation: "baabb" -> "b" -> "". 
 * Remove palindromic subsequence "baab" then "b".
 *
 * Example 4:
 * Input: s = ""
 * Output: 0
 *
 * Constraints:
 * 0 <= s.length <= 1000
 * s only consists of letters 'a' and 'b'
*/
/*
 * Logic is to check whether the input string is palindrome or not
 * If it is palindrome, then in one step the subsequence is deleted
 * to make it empty.
 * not palindrome - string is formed only with two characters then
 * removing some continous characters, then string will become
 * palindrome. So there will be 2 steps.
*/
int removePalindromeSub(string s) {
    if (s.empty()) {
        // The string is already empty, no charactes remain to delete
        return 0;
    }

    int start = 0;
    int end = s.length() - 1;

    // Loop to check whether the string is palindrome or not
    while (start < end) {
        if (s[start++] != s[end--])
            // string is not palindrome, there will be 2 steps to make
            // the stirng empty, one for characters that make the string
            // palindrome and other the palindrome string
            return 2;
    }

    // String is palindrome, in one step the string can be deleted
    return 1;
}
