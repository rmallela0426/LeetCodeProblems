
/*
 *  Author: Raghavendra Mallela
*/
/*
 * LeetCode 535: Encode And Decode Tiny Url
 *
 * TinyURL is a URL shortening service where you enter a URL such as
 * https://leetcode.com/problems/design-tinyurl and it returns a short
 * URL such as http://tinyurl.com/4e9iAk.
 *
 * Design the encode and decode methods for the TinyURL service. There
 * is no restriction on how your encode/decode algorithm should work.
 * You just need to ensure that a URL can be encoded to a tiny URL and
 * the tiny URL can be decoded to the original URL.
*/
/*
 * There are 62 alphanumeric characters i.e..,
 * a...z, A....Z, 0...9 = 26+26+10 = 62 chars
 * If the service use 7 characters to generate the tinyurl
 * then there will be 62^7 combination of codes which is
 * 3.5trillion codes.
 * The service uses a hasmap and an string of 62 alphanumeric
 * characters, and code will be generated by an index to the
 * string by using random no generator % 62
*/
// Alphanumeric character string
string alphaNumeric = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
// Database to store the code and longURL
std::unordered_map</*code*/string, /*longURL*/string> db;

// Encodes a URL to a shortened URL.
string encode(string longUrl) {
    // Generate the code, as this service uses 7 characters, loop
    // to get the 7 indices of the alphanumeric
    string code = "";
    // Generate a code until unique one is generated
    while (db.find(code) != db.end() || code == "") {
        for (int i = 0; i < 7; i++) {
            code += alphaNumeric[rand() % 62];
        }
    }

    // Now that there an unique code, return code by appending to the
    // tinyurl.com
    string shortUrl = "http://tinyurl.com/" + code;
    db[shortUrl] = longUrl;

    return shortUrl;
}

// Decodes a shortened URL to its original URL.
string decode(string shortUrl) {
    return db[shortUrl];
}

